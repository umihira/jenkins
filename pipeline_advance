pipeline {
    agent any
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    parameters {
        // string(name: 'BUCKET_NAME', description: 'Enter the bucket name')
        string(name: 'EC2_INSTANCE_IP', description: 'Enter the bucket name')
        // string(name: 'DOCKER_IMAGE_NAME', description: 'Enter the docker image name')
        // string(name: 'DOCKER_CONTAINER_NAME', description: 'Enter the bucket name')
        // string(name: 'EMAIL_RECIPIENT', description: 'Email address to receive the notification')
        string(name: 'BRANCH', description: 'Deploy Branch')
        string(name: 'S3_BUCKET_NAME', description: 'Deploy Bucket Name')
        string(name: 'EC2_INSTANCE_NAME', description: 'Deploy EC2 Name')
        string(name: 'STACK_NAME', description: 'Deploy Stack Name')

    }

    stages {
        stage('Clean up build env linux') {
        agent { 
            label 'linux'
        }            
            steps {
                cleanWs()
        }
        }
        stage('Checkout Linux') {
        agent { 
            label 'linux'
        }            
            steps {
                git branch: params.BRANCH, credentialsId: '558c4834-fb91-4de9-92bb-3cdaafeb8ac5', url: 'https://github.com/umihira/jenkins.git'            } 
        }
        // stage('Clean up build env windows') {
        // agent { 
        //     label 'windows-slave'
        // }            
        //     steps {
        //         cleanWs()
        //     }        
        // }
        // stage('Checkout Windows') {
        // agent { 
        //     label 'windows-slave'
        // }            
        //     steps {
        //         git branch: params.BRANCH, credentialsId: '95598b0f-5f34-4404-bbed-657578cc4fc3', url: 'https://github.com/luuthanhtu020296/jenkins-template.git'            } 
        // }        
        // stage('Build') {
        // agent { 
        //     label 'linux'
        // }            
        //     steps {
        //         script {
        //             // Perform any build steps if needed
        //             sh "ls -l -a"
        //         }
        //     }
        // }
        // // stage('Deploy to S3') {
        // //     steps {
        // //         withCredentials([[
        // //             $class: 'AmazonWebServicesCredentialsBinding',
        // //             credentialsId: "jenkin",
        // //             accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        // //             secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        // //         ]]) {
        // //             sh 'aws s3 sync . s3://vqhbbucket	'
        // //             // sh 'cat /home/ec2-user/work/workspace/demo-tos3/index.html'
        // //         }
        // //     }
        // // }
        
        // stage('Install Docker') {
        // agent { 
        //     label 'linux'
        // }            
        //     steps {
        //         script {
        //             // SSH into EC2 instance and run the Docker container
        //             sshagent(['deploy']) {
        //                 sh """
        //                     scp linux_install_guilde_docker/install-docker-amazon.sh ec2-user@${EC2_INSTANCE_IP}:/home/ec2-user/deploy/
        //                 """
        //             }
        //         }
        //         script {
        //             sshagent(['deploy']) {
        //                 sh """ssh ec2-user@${EC2_INSTANCE_IP} '. /home/ec2-user/deploy/install-docker-amazon.sh'"""
        //                 }
        //         }
        //     }
        // }
        // stage('Deploy Web Application with Docker Compose') {
        // agent { 
        //     label 'linux'
        // }            
        //     steps {
        //         script {
        //             // Copy Docker Compose file to the EC2 instance
        //             sshagent(['deploy']) {
        //                 sh """scp docker-compose.yml ec2-user@${EC2_INSTANCE_IP}:/home/ec2-user/deploy/"""
        //             }
        //             // Copy nginx config file to the EC2 instance
        //             sshagent(['deploy']) {
        //                 sh """scp nginx.conf ec2-user@${EC2_INSTANCE_IP}:/home/ec2-user/deploy"""
        //             } 
        //             // Copy html file to the EC2 instance
        //             sshagent(['deploy']) {
        //                 sh """scp index.html ec2-user@${EC2_INSTANCE_IP}:/home/ec2-user/deploy"""
        //             }                     
        //             // Deploy the web application using Docker Compose on the EC2 instance
        //             sshagent(['deploy']) {
        //                 sh """ssh ec2-user@${EC2_INSTANCE_IP} 'cd /home/ec2-user/deploy/ && docker compose -f docker-compose.yml up -d'"""
        //             }
        //         }
        //     }
        // }
        // stage('Scan with windows') {
        // agent { 
        //     label 'windows-slave'
        // }            
        //     steps {
        //         // bat 'cd JenkinsWebApplicationDemo && sonar-scanner -Dsonar.projectKey=testc -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=squ_f09ad1c0fd77e0d30e72876858242610c06ae80e'
        //         bat 'cd JenkinsWebApplicationDemo && D:/sonar-scanner/bin/sonar-scanner.bat -Dsonar.projectKey=testc -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=squ_b11ef2e813430d664d3941c512d3955a7bd9cd9d'
        //     }
        // }        
        // stage('Slack Notify') {
        // agent { 
        //     label 'linux'
        // }            
        //     steps {
        //         slackSend channel: 'demo', message: 'test'
        //     }
        // }
        stage('Build and Test') {
            parallel {
                stage('Build and Test on main') {
                agent { 
                    label 'linux'
                }                      
                    when {
                            expression { params.BRANCH == 'main' }
                    }
                    steps {
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: "jenkins",
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh """aws cloudformation create-stack --stack-name ${STACK_NAME} --template-body file://template.yaml --parameters ParameterKey=InstanceName,ParameterValue=${EC2_INSTANCE_NAME}"""
                        }
                    }
                }

                stage('Build and Test on Dev') {
                agent { 
                    label 'linux'
                }                     
                    when {
                        expression { params.BRANCH == 'dev' }
                    }
                    steps {
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: "jenkins",
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh """aws cloudformation create-stack --stack-name ${STACK_NAME} --template-body file://template.yaml --parameters ParameterKey=BucketName,ParameterValue=${S3_BUCKET_NAME}"""
                        }
                    }
                }
            }
        }
    }   
    post {
         always {  
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }  
    //      success {  
    //         script {
    //             // Send email on success build
    //             emailext subject: 'Jenkins Build Success',
    //                       body: 'The Jenkins build Success',
    //                       to: params.EMAIL_RECIPIENT,
    //                       replyTo: '',
    //                       mimeType: 'text/html'
    //         }
    //     }  
    //      failure {  
    //         script {
    //             // Send email on failed build
    //             emailext subject: 'Jenkins Build Failure',
    //                       body: 'The Jenkins build failed. Please check the Jenkins console for details.',
    //                       to: params.EMAIL_RECIPIENT,
    //                       replyTo: '',
    //                       mimeType: 'text/html'
    //         }
    //      }  
    //      unstable {  
    //          echo 'This will run only if the run was marked as unstable'  
    //      }  
    //      changed {  
    //          echo 'This will run only if the state of the Pipeline has changed'  
    //          echo 'For example, if the Pipeline was previously failing but is now successful'  
    //      } 
    }      
}
